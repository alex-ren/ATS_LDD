!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
a0rg	absyn.sats	/^and a0rg = @{$/;"	kind: declaration



aux_exp	trans2.dats	/^implement aux_exp /;"	kind: implementation 
aux_exp	trans2.dats	/^extern fun aux_exp /;"	kind: declaration 
aux_exp_ret	trans2.dats	/^aux_exp_ret /;"	kind: declaration 
aux_exp_ret	trans2.dats	/^extern fun aux_exp_ret /;"	kind: implementation 

ncluster_norm	ats_fat_file.sats	/typedef ncluster_norm =/;" kind: definition
ncluster_valid	ats_fat_file.sats	/typedef ncluster_valid =/;" kind: definition

oftype	trans1.dats	/^extern fun oftype (Gamma: ctx, e0: e0xp): (e1xp, tyerr_pool)$/;"	kind: declaration 
oftype	trans1.dats	/^implement oftype (Gamma, e0) = let$/;"	kind: implementation 
oftype_valdec	trans1.dats	419;"	kind:macro 

symenv_insert	symbol.sats	/^symenv_insert (env: symenv_t a, sym: symbol_t, x: a): symenv_t a$/;" kind declaration 
tmpvar_get_name	trans2.sats	/^fun tmpvar_get_name (v: tmpvar): string$/;" kind declaration 
trans1_typ	trans1.sats	/^fun trans1_typ (_: $Absyn.t0yp): t1yp$/;"	kind: declaration 
trans1_typ	trans1.dats	/^trans1_typ (t) = aux (t) where {$/;"	kind: implementation 
trans_clo2_e1xp	trans_closure.dats	/^fun trans_clo2_e1xp (exp: e1xp, Gamma: ctx, env: v1arlst): e1xp/;"	kind: implementation 
trans_llvm_instr	trans_llvm.dats	/^extern fun trans_llvm_instr (instr: instr): statements/;"	kind: declaration 
trans_llvm_instr	trans_llvm.dats	/^implement trans_llvm_instr (instr) =/;"	kind: implementation 
trans_llvm_instrlst	trans_llvm.dats	/^extern fun trans_llvm_instrlst (body: instrlst): statements/;"	kind: declaration 
trans_llvm_instrlst	trans_llvm.dats	/^implement trans_llvm_instrlst (body) = let/;"	kind: implement 
trans_llvm_valprim	trans_llvm.dats	/^fun trans_llvm_valprim (vp: valprim):/;"	kind: implement 
typcheck	trans1.dats	/^extern fun typcheck (Gamma: ctx, e0: e0xp, t1: t1yp): (e1xp, tyerr_pool)$/;"	kind: declaration 
typcheck	trans1.dats	/^implement typcheck (Gamma, e0, t1) = let$/;"	kind: implementation 


